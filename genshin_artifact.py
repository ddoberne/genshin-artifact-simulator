# -*- coding: utf-8 -*-
"""genshin_artifact.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W6_HKVHqLwmAr5MXTXZjuvdFDz18LB3E
"""

import random

domain_dict = {'Clear Pool and Mountain Cavern': ['Noblesse Oblige', 'Bloodstained Chivalry', 'Scholar', 'Gambler'],
               'Domain of Guyun': ['Retracing Bolide', 'Archaic Petra', 'Brave Heart', 'Lucky Dog'],
               'Hidden Palace of Zhou Formula': ['Crimson Witch of Flames', 'Lavawalker', 'Martial Artist', "Defender's Will"],
               'Midsummer Courtyard': ['Thundersoother', 'Thundering Fury', 'Adventurer', 'Resolution of Sojourner'],
               'Momiji-Dyed Court': ['Emblem of Severed Fate', "Shimenawa's Reminiscence", 'Tiny Miracle', 'Resolution of Sojourner'],
               'Peak of Vindagnyr': ['Heart of Depths', 'Blizzard Strayer', 'Gambler', "Defender's Will"],
               'Ridge Watch': ['Pale Flame', 'Tenacity of the Millileth', 'Martial Artist', 'Brave Heart'],
               'Slumbering Court': ['Ocean-Hued Clam', 'Husk of Opulent Dreams', 'Brave Heart', "Defender's Will"],
               'Spire of Solitary Enlightenment': ['Gilded Dreams', 'Deepwood Memories', 'Gambler', 'Tiny Miracle'],
               'The Lost Valley': ['Echoes of an Offering', 'Vermillion Hereafter', 'Gambler', 'Martial Artist'],
               'Valley of Remembrance': ['Maiden Beloved', 'Viridescent Venerer', 'Traveling Doctor', 'Tiny Miracle']}

piece_dict = {1:'flower', 2:'plume', 3:'sands', 4:'goblet', 5:'circlet'}
mstat_dict = {'flower':[['hp'],[100]],
              'plume':[['atk'],[100]],
              'sands':[['hp%', 'atk%', 'def%', 'er%', 'em'],[26.68, 26.66, 26.66, 10, 10]],
              'goblet':[['hp%', 'atk%', 'def%', 'pyro%', 'electro%', 'cryo%', 'hydro%', 'dendro%', 'anemo%', 'geo%', 'physical%', 'em'],[19.175, 19.175, 19.150, 5, 5, 5, 5, 5, 5, 5, 5, 2.5]],
              'circlet':[['hp%', 'atk%', 'def%', 'cr%', 'cd%', 'healing%', 'em'],[22, 22, 22, 10, 10, 10, 4]]}
flatrates = [15.79, 15.79, 10.53, 10.53, 10.53, 10.53, 10.53, 7.89, 7.89]
pctrates = [15, 15, 15, 10, 10, 10, 10, 7.5, 7.5]
elementalrates = [13.64, 13.64, 13.64, 9.09, 9.09, 9.09, 9.09, 9.09, 6.82, 6.82]
critrates = [14.63, 14.63, 14.63, 9.76, 9.76, 9.76, 9.76, 9.76, 7.32]
substats = ['hp', 'atk', 'def', 'hp%', 'atk%', 'def%', 'er%', 'em', 'cr%', 'cd%']
sstat_dict = {'hp': [substats.copy(), flatrates],
              'atk': [substats.copy(), flatrates],
              'hp%': [substats.copy(), pctrates],
              'atk%': [substats.copy(), pctrates],
              'def%': [substats.copy(), pctrates],
              'er%': [substats.copy(), pctrates],
              'em': [substats.copy(), pctrates],
              'cr%': [substats.copy(), critrates],
              'cd%': [substats.copy(), critrates],}

for key in ['hp', 'atk', 'hp%', 'atk%', 'def%', 'er%', 'em', 'cr%', 'cd%']:
  sstat_dict[key][0].remove(key)

for elemental in ['pyro%', 'electro%', 'cryo%', 'hydro%', 'dendro%', 'anemo%', 'geo%', 'physical%', 'healing%']:
  sstat_dict[elemental] = [substats.copy(), elementalrates]


class Artifact:
  def __init__(self, stars, aset):
    self.aset = aset
    self.stars = stars
    self.piece = piece_dict[random.randint(1, 5)]
    self.mstat = random.choices(population = mstat_dict[self.piece][0], weights = mstat_dict[self.piece][1], k = 1)[0]
    self.sstat = []
    while len(self.sstat) < stars - 1:
      roll = random.choices(population = sstat_dict[self.mstat][0], weights = sstat_dict[self.mstat][1], k = 1)[0]
      if roll not in self.sstat:
        self.sstat.append(roll)
    
class Domain:
  def __init__(self, sets):
    self.sets = sets
    self.output = {3:[],
                   4:[],
                   5:[]}
    self.exp = 0
    self.match = False
  
  def create_match(self,  stars = False, asets = False, pieces = False, mstats = False, sstats = False):
    self.match = {'stars': stars,
                  'asets': asets,
                  'pieces': pieces,
                  'mstats': mstats,
                  'sstats': sstats}
  
  def check_match(self, a, verbose = False):
    if verbose:
      print((a.stars, a.aset, a.piece, a.mstat, a.sstat))
    if self.match['stars'] and a.stars not in self.match['stars']:
      return False
    if self.match['asets'] and a.aset not in self.match['asets']:
      return False
    if self.match['pieces'] and a.piece not in self.match['pieces']:
      return False
    if self.match['mstats'] and a.mstat not in self.match['mstats']:
      return False
    if self.match['sstats']:
      checklist = self.match['sstats'].copy()
      for stat in a.sstat:
        if stat in checklist:
          checklist.remove(stat)
      if len(checklist) > 0:
        return False
    return True

      

    


  def run(self, n = 1, verbose = False):
    fives = random.choices(population = [1,2], weights = [93, 7], k = 1)[0]
    fours = random.choices(population = [2,3], weights = [52, 48], k = 1)[0]
    threes = random.choices(population = [3,4], weights = [45, 55], k = 1)[0]
    match_found = False
    for j in range(n):
      for i in range(fives):
        a = Artifact(stars = 5, aset = random.choice(self.sets[:2]))
        if self.check_match(a, verbose):
          match_found = True
        self.output[5].append(a)
        self.exp += 3780
      for i in range(fours):
        a = Artifact(stars = 4, aset = random.choice(self.sets))
        if self.check_match(a, verbose):
          match_found = True
        self.output[4].append(a)
        self.exp += 2520
      for i in range(threes):
        a = Artifact(stars = 3, aset = random.choice(self.sets[2:]))
        if self.check_match(a, verbose):
          match_found = True
        self.output[3].append(a)
        self.exp += 1260
      
    return match_found

d = Domain(domain_dict['Slumbering Court'])
d.create_match(asets = ['Husk of Opulent Dreams'], stars = [4,5], pieces = ['plume', 'flower'])
print(d.run())
for i in [5,4,3]:
  for a in d.output[i]:
    print((a.stars, a.aset, a.piece, a.mstat, a.sstat))

stars = [5,4]
aset = ['Viridescent Venerer']
pieces = ['goblet', 'circlet']
mstats = ['em']
d = Domain(domain_dict['Valley of Remembrance'])
d.create_match(asets = aset, stars = stars, pieces = pieces, mstats= mstats)
iterations = 100
attempts = 0
for iteration in range(iterations):
  i = 0
  while(True):
    i += 1
    if d.run(verbose = False):
      attempts += i
      break
print(attempts/iterations)

